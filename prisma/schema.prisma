datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  OVERDUE
}

model User {
  id              String    @id @default(uuid()) @map("id")
  name            String
  email           String    @unique
  password        String
  role            UserRole
  birthdate       DateTime? @map("birthdate")
  phone           String?
  cpfCnpj         String?   @map("cpf_cnpj")
  avatar          String?
  token           String?
  recoveryCode    String?   @map("recovery_code")
  firstAccess     Boolean   @default(true) @map("first_access")
  failedAttempts  Int       @default(0) @map("failed_attempts")
  lastLogin       DateTime? @map("last_login")
  passwordResetAt DateTime? @map("password_reset_at")
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("usuarios")
}

model Customer {
  id        String   @id @default(uuid()) @map("id")
  cnpj      String   @unique
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  zipCode   String?  @map("zip_code")
  city      String?
  state     String?
  country   String?
  contact   String?
  retIss    Boolean  @default(false) @map("ret_iss")
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  AccountsReceivable AccountsReceivable[]

  @@map("clientes")
}

model Supplier {
  id        String   @id @default(uuid()) @map("id")
  cnpj      String   @unique
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  zipCode   String?  @map("zip_code")
  city      String?
  state     String?
  country   String?
  contact   String?
  retIss    Boolean  @default(false) @map("ret_iss")
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  AccountsPayable AccountsPayable[]

  @@map("fornecedores")
}

model CostCenter {
  id        String   @id @default(uuid()) @map("id")
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  AccountsPayable    AccountsPayable[]
  AccountsReceivable AccountsReceivable[]

  @@map("centro_custos")
}

model TaxRates {
  id               String   @id @default(uuid()) @map("id")
  year             Int
  month            Int
  issqnTaxRate     Float    @map("issqn_tax_rate")
  effectiveTaxRate Float    @map("effective_tax_rate")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@map("aliquotas")
}

model CashBox {
  id        String   @id @default(uuid()) @map("id")
  name      String
  balance   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  cashTransactions CashTransaction[]

  @@map("caixa")
}

model CashTransaction {
  id            String          @id @default(uuid()) @map("id")
  cashBoxId     String          @map("cash_box_id")
  description   String
  amount        Int // Valor em centavos
  type          TransactionType // DEBIT ou CREDIT
  transactionAt DateTime        @map("transaction_at")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  cashBox CashBox @relation(fields: [cashBoxId], references: [id])

  @@map("transacoes_caixa")
}

model BankAccounts {
  id        String   @id @default(uuid()) @map("id")
  bank      String
  agency    String
  account   String
  type      String?  @default("C")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  balances           BankBalance[]
  BankTransactions   BankTransactions[]
  AccountsReceivable AccountsReceivable[]

  @@map("contas_bancarias")
}

model BankBalance {
  id            String   @id @default(uuid()) @map("id")
  bankAccountId String   @map("bank_account_id")
  balance       Int // Valor em centavos
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  bankAccount BankAccounts @relation(fields: [bankAccountId], references: [id])

  @@map("saldo_bancario")
}

model BankTransactions {
  id                    String          @id @default(uuid()) @map("id")
  description           String
  amount                Int // Valor em centavos
  detailing             String?
  type                  TransactionType
  transactionAt         DateTime        @map("transaction_at")
  bankAccountId         String          @map("bank_account_id")
  reasonForCancellation String?         @map("reason_for_cancellation")
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")
  cancelledAt           DateTime?       @map("cancelled_at")

  bankAccount BankAccounts @relation(fields: [bankAccountId], references: [id])

  @@map("transacoes_bancarias")
}

model PaymentMethod {
  id           String   @id @default(uuid()) @map("id")
  name         String
  requiresBank Boolean  @default(true) @map("requires_bank")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  PaymentTerms       PaymentTerms[]
  AccountsPayable    AccountsPayable[]
  AccountsReceivable AccountsReceivable[]

  @@map("formas_pagamento")
}

model PaymentTerms {
  id              String   @id @default(uuid()) @map("id")
  paymentMethodId String   @map("payment_method_id")
  condition       String
  description     String?
  installments    Int?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@map("condicoes_pagamento")
}

model AccountsPayable {
  id                   String        @id @default(uuid()) @map("id")
  supplierId           String        @map("supplier_id")
  documentNumber       String?       @map("document_number")
  documentDate         DateTime?     @map("document_date") // data do documento
  launchDate           DateTime?     @map("launch_date") // data de lançamento
  dueDate              DateTime?     @map("due_date") // data de vencimento
  paymentDate          DateTime?     @map("payment_date") // data de pagamento
  value                Int?
  paidValue            Int?          @map("value_paid")
  discount             Int?
  fine                 Int? // multa
  interest             Int? // juros
  installmentNumber    Int?          @map("installment_number") // número da parcela
  totalInstallments    Int?          @map("total_installments") // total de parcelas
  costCenterId         String?       @map("cost_center_id")
  plannedPaymentMethod String?       @map("planned_payment_method")
  paymentMethodId      String?       @map("payment_method_id")
  userId               String?       @map("user_id")
  observation          String?
  status               PaymentStatus @default(PENDING)

  Supplier      Supplier       @relation(fields: [supplierId], references: [id])
  CostCenter    CostCenter?    @relation(fields: [costCenterId], references: [id])
  PaymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  cancelledAt DateTime? @map("cancelled_at")

  @@map("contas_pagar")
}

model AccountsReceivable {
  id                   String        @id @default(uuid()) @map("id")
  customerId           String        @map("customer_id")
  documentNumber       String?       @map("document_number")
  documentDate         DateTime?     @map("document_date") // data do documento
  launchDate           DateTime?     @map("launch_date") // data de lançamento
  dueDate              DateTime?     @map("due_date") // data de vencimento
  receiptDate          DateTime?     @map("receipt_date") // data de recebimento
  value                Int?
  receivedValue        Int?          @map("received_value")
  discount             Int?
  fine                 Int? // multa
  interest             Int? // juros
  installmentNumber    Int?          @map("installment_number") // número da parcela
  totalInstallments    Int?          @map("total_installments") // total de parcelas
  costCenterId         String?       @map("cost_center_id")
  bankAccountId        String?       @map("bank_account_id")
  plannedPaymentMethod String?       @map("planned_payment_method")
  paymentMethodId      String?       @map("payment_method_id")
  userId               String?       @map("user_id")
  observation          String?
  status               PaymentStatus @default(PENDING)

  Customer      Customer       @relation(fields: [customerId], references: [id])
  CostCenter    CostCenter?    @relation(fields: [costCenterId], references: [id])
  BankAccount   BankAccounts?  @relation(fields: [bankAccountId], references: [id])
  PaymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  cancelledAt DateTime? @map("cancelled_at")

  @@map("contas_receber")
}
